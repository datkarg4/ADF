{
	"name": "merge_student",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "idcapachespool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "e7939dfa-2783-42e5-995c-549927a53ad2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/f79ade56-8f39-4e53-9abf-29a4c779f163/resourceGroups/adf-idc-storage-account/providers/Microsoft.Synapse/workspaces/idc-app-synapse/bigDataPools/idcapachespool",
				"name": "idcapachespool",
				"type": "Spark",
				"endpoint": "https://idc-app-synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/idcapachespool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"\r\n",
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"\r\n",
					"data1 =[(1,\"hrushikesh\",\"Pune\")]\r\n",
					"dataschema = [\"id\",\"name\",\"city\"]\r\n",
					"data2schema = [\"id\",\"name\",\"city\",\"state\"]\r\n",
					"data2 =[(2,\"Aman\",\"jabalpur\",\"MP\"),(3,\"himanshu\",\"Mumbai\",\"MH\"),(4,\"Rajesh\",\"Mumbai\",\"MH\")]\r\n",
					"\r\n",
					"df1 =spark.createDataFrame(data1,dataschema)\r\n",
					"df1.show()\r\n",
					"df2 =spark.createDataFrame(data2,data2schema)\r\n",
					"df2.show()\r\n",
					"df3 = df1.withColumn(\"State\",lit(\"\"))\r\n",
					"#df3 = df1.withColumn(\"state\", \"\")\r\n",
					"df4 = df2.union(df3)\r\n",
					"\r\n",
					"df4.write.mode(\"overwrite\").csv('student.csv', header=True)"
				],
				"execution_count": null
			}
		]
	}
}